// host_fpga.h
#ifndef _HOST_FPGA_H_
#define _HOST_FPGA_H_

#include <linux/ioctl.h>

#include "uvtypes_def.h"

#define UV_HFPGA_MAJOR_NR (60)
#define UV_HFPGA_MINOR_NR (0)

#define UV_HFPGA_BASE_ADDR (0x84000000)

typedef enum {
		HFPGA_REG_ADDR_SYS_ID = 0x84000000,
		HFPGA_REG_ADDR_SYS_VER = 0x84000004,
		HFPGA_REG_ADDR_SYS_TEST = 0x84000008,
		HFPGA_REG_ADDR_MAP_MEM = 0x8400000C,
		HFPGA_REG_ADDR_MEM_DATA_L16 = 0x84000010,
		HFPGA_REG_ADDR_MEM_DATA_H16 = 0x84000014,
		HFPGA_REG_ADDR_MAP_MEM_WCON = 0x84000018,
		HFPGA_REG_ADDR_FIFO_STATUS = 0x8400001C,
		HFPGA_REG_ADDR_FIFO_RCON = 0x84000020,
		HFPGA_REG_ADDR_RST_FIFO = 0x84000024,
		HFPGA_REG_ADDR_CHA_SEL = 0x84000028,
		HFPGA_REG_ADDR_TS_STATUS = 0x8400002C,
		HFPGA_REG_ADDR_SI_SS = 0x84000030,
		HFPGA_REG_ADDR_SI_40MS_PACK_ADDR = 0x84000034,
		HFPGA_REG_ADDR_SI_40MS_PACK_LEN = 0x84000038,
		HFPGA_REG_ADDR_SI_2S_PACK_ADDR = 0x840003C,
		HFPGA_REG_ADDR_SI_2S_PACK_LEN = 0x84000040,
		HFPGA_REG_ADDR_SYS_RATE_MSB = 0x84000044,
		HFPGA_REG_ADDR_SYS_RATE_LSB = 0x84000048,
		HFPGA_REG_ADDR_SYS_PALENGTH = 0x8400004C,

} EUV_HFPGA_REG_ADDR;

#define HFPGA_MAP_MEM_ADDR_BASE (0x80)

#define UV_HFPGA_INVALID_PID_MAP (0xFFFF)

#define UV_HFPGA_TS_FIFO_RD_MAX_DELAY (0xFFFFFF)

#define HFPGA_MAP_MEM_ADDR_SI_PHY_BASE (0x2000)

#define HFPGA_MAP_MEM_ADDR_SI_BASE (0x0000)
#define HFPGA_MAP_MEM_ADDR_SI_40MS_BASE (HFPGA_MAP_MEM_ADDR_SI_BASE)
#define HFPGA_MAP_MEM_ADDR_SI_2S_BASE (HFPGA_MAP_MEM_ADDR_SI_BASE+34*188)

typedef struct
{
	unsigned long reg; // reg address
	unsigned short data;
} ACCESS_HFPGA_REGS, *PACCESS_HFPGA_REGS;

#define UV_HFPGA_MAX_IN_CHA (0x7)

typedef struct
{
	unsigned char cha; // 每一个bit标示TS通道TS PACK状态 
	unsigned char ts[UV_HFPGA_MAX_IN_CHA][188];
} ACCESS_HFPGA_TS_PACK, *PACCESS_HFPGA_TS_PACK;

typedef struct
{
	unsigned char pids[8*1024];
} ACCESS_HFPGA_ALL_PIDS, *PACCESS_HFPGA_ALL_PIDS;

typedef struct
{
   unsigned short  in_pid;
   unsigned short  out_pid;   
} pid_map_S;

typedef struct
{
   unsigned char cha; // 0 - 7 
   pid_map_S pid_map[256];  // 8 * 32
} ACCESS_HFPGA_PID_MAP, *PACCESS_HFPGA_PID_MAP;

typedef struct {
	unsigned int addr;
 	unsigned char *pdata;
	unsigned int len;
	int nbgn;
} ACCESS_HFPGA_STR_DATA, *PACCESS_HFPGA_STR_DATA;

typedef struct {
	unsigned int cmd;
} ACCESS_HFPGA_CMD, *PACCESS_HFPGA_CMD;

typedef enum {
	HFPGA_CMD_SI_STOP = 0x00,
	HFPGA_CMD_SI_START = 0x01

} EUV_HFPGA_CMDS;


#define KEY_IOCTL_RD_REGS				(0x00)
#define KEY_IOCTL_WR_REGS				(0x01)
#define KET_IOCTL_RD_TS_PACK				(0x02)
#define KET_IOCTL_WR_TS_PACK 	  			(0x03)
#define KET_IOCTL_RD_ALL_PIDS   			(0x04)
#define KET_IOCTL_WR_PID_MAP    			(0x05)
#define KET_IOCTL_RD_PID_MAP				(0x06)
#define KET_IOCTL_RD_STR_DATA    			(0x07)
#define KET_IOCTL_WR_STR_DATA    			(0x08)

#define  KET_IOCTL_WR_CMD   			        (0x09)

#define UV_KEY_IOCTL_MAX_KEY       			(0x20)


// Magic number used to uniqueify ioctl commands
static const unsigned char UV_HFPGA_MAGIC = 'u'|'v';


#define UV_HFPGA_IOCTL_CMD_READ_REGS  	    _IOWR(UV_HFPGA_MAGIC, KEY_IOCTL_RD_REGS, ACCESS_HFPGA_REGS)
#define UV_HFPGA_IOCTL_CMD_WRITE_REGS 	    _IOWR(UV_HFPGA_MAGIC, KEY_IOCTL_WR_REGS, ACCESS_HFPGA_REGS)
#define UV_HFPGA_IOCTL_CMD_READ_TS_PACK     _IOWR(UV_HFPGA_MAGIC, KET_IOCTL_RD_TS_PACK, ACCESS_HFPGA_TS_PACK)
#define UV_HFPGA_IOCTL_CMD_WRITE_TS_PACK    _IOWR(UV_HFPGA_MAGIC, KET_IOCTL_WR_TS_PACK, ACCESS_HFPGA_TS_PACK)
#define UV_HFPGA_IOCTL_CMD_READ_ALL_PIDS    _IOWR(UV_HFPGA_MAGIC, KET_IOCTL_RD_ALL_PIDS, ACCESS_HFPGA_ALL_PIDS)
#define UV_HFPGA_IOCTL_CMD_WRITE_PID_MAP    _IOWR(UV_HFPGA_MAGIC, KET_IOCTL_WR_PID_MAP, ACCESS_HFPGA_PID_MAP)
#define UV_HFPGA_IOCTL_CMD_READ_PID_MAP	    _IOWR(UV_HFPGA_MAGIC, KET_IOCTL_RD_PID_MAP, ACCESS_HFPGA_PID_MAP)

#define UV_HFPGA_IOCTL_CMD_READ_STR_DATA    _IOWR(UV_HFPGA_MAGIC, KET_IOCTL_RD_STR_DATA, ACCESS_HFPGA_STR_DATA)
#define UV_HFPGA_IOCTL_CMD_WRITE_STR_DATA   _IOWR(UV_HFPGA_MAGIC, KET_IOCTL_WR_STR_DATA, ACCESS_HFPGA_STR_DATA)

#define UV_HFPGA_IOCTL_CMD_CMDS   	    _IOWR(UV_HFPGA_MAGIC, KET_IOCTL_WR_CMD, ACCESS_HFPGA_CMD)


#endif
